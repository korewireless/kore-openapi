openapi: 3.0.0
info:
  title: Programmable Wireless APIs
  description: The KORE Programmable Wireless REST API
  termsOfService: https://pardot.korewireless.com/koremsa
  contact:
    name: KORE Support
    url: https://korewireless.service-now.com/csm
    email: support@korewireless.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://programmable-wireless.api.korewireless.com
paths:
  /v1/UsageRecords:
    get:
      summary: List Data Usage records for an account 
      tags:
        - UsageRecords Resource
      operationId: listDataUsage
      parameters:
        - name: Start
          in: query
          required: false
          description: >-
            Only include usage that has occurred on or after this date. Format
            is ISO 8601
          schema:
            type: string
            x-jvm-type: java.time.Instant
        - name: End
          in: query
          required: false
          description: >-
            Only include usage that has occurred on or before this date. Format
            is ISO 8601.
          schema:
            type: string
            x-jvm-type: java.time.Instant
        - name: Granularity
          in: query
          required: false
          description: >-
            How to summarize the usage by time. Can be - daily, hourly, or all.
            A value of all returns one Usage Record that describes the usage for
            the entire period.
          schema:
            $ref: '#/components/schemas/Granularity'
        - name: PageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            description: >-
              How many resources to return in each list page. The default is 50,
              and the maximum is 1000. Minimum= 1 Maximum=1000
        - name: Page
          in: query
          required: false
          schema:
            type: integer
          description: The page index. This value is simply for client state.
        - name: PageToken
          description: The page token. This is provided by the API.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Data Usage List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageList'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '409':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff
            'https://programmable-wireless.api.korewireless.com/v1/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&Page=<string>&PageToken=<string>'
            \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&Page=<string>&PageToken=<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&Page=<string>&PageToken=<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_BEARER_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&Page=<string>&PageToken=<string>")
            {
               MaxTimeout = -1,    
            };
            var client = new RestClient(options);
            var request = new RestRequest("", Method.Get);
            request.AddHeader("Authorization", "Bearer <YOUR_BEARER_TOKEN>");
            request.AddHeader("Accept", "application/json");
            RestResponse response = await client.ExecuteAsync(request);
            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php
            $curl = curl_init();
            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&Page=<string>&PageToken=<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  'Accept: application/json'
               ),
            ));
            $response = curl_exec($curl);
            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests

            url =
            "https://programmable-wireless.api.korewireless.com/v1/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&Page=<string>&PageToken=<string>"

            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_BEARER_TOKEN>',
               'Accept': 'application/json'
            }

            response = requests.request("GET", url, headers=headers,
            data=payload)

            print(response.text)
  /v1/Sims/{Sid}/UsageRecords:
    parameters:
      - name: Sid
        in: path
        description: The SID of the Sim resource to read the usage from.
        schema:
          type: string
        required: true
    get:
      summary: List Data Usage records for a sim
      tags:
        - UsageRecords Resource
      operationId: listDataUsageForSim
      parameters:
        - name: Start
          in: query
          required: false
          description: >-
            Only include usage that has occurred on or after this date. Format
            is ISO 8601
          schema:
            type: string
            x-jvm-type: java.time.Instant
        - name: End
          in: query
          required: false
          description: >-
            Only include usage that has occurred on or before this date. Format
            is ISO 8601.
          schema:
            type: string
            x-jvm-type: java.time.Instant
        - name: Granularity
          in: query
          required: false
          description: >-
            How to summarize the usage by time. Can be - daily, hourly, or all.
            A value of all returns one Usage Record that describes the usage for
            the entire period.
          schema:
            $ref: '#/components/schemas/Granularity'
        - name: PageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            description: >-
              How many resources to return in each list page. The default is 50,
              and the maximum is 1000. Minimum= 1 Maximum=1000
        - name: Page
          in: query
          required: false
          schema:
            type: integer
          description: The page index. This value is simply for client state.
        - name: PageToken
          description: The page token. This is provided by the API.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Data Usage List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SIMUsageList'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff
            'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&PageToken=<string>'
            \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&PageToken=<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&PageToken=<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&PageToken=<string>")

            {
               MaxTimeout = -1, 
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Get);

            request.AddHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&PageToken=<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url =
            "https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/UsageRecords?Start=<string>&End=<string>&Granularity=<string>&PageSize=<integer>&PageToken=<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
  /v1/Sims/{Sid}/DataSessions:
    parameters:
      - name: Sid
        in: path
        description: The SID of the Sim resource to read the usage from.
        schema:
          type: string
        required: true
    get:
      summary: List Data Usage records for a sim
      tags:
        - DataSessions Resource
      operationId: getDataSession
      parameters:
        - name: PageSize
          in: query
          required: false
          schema:
            type: integer
            description: >-
              How many resources to return in each list page. The default is 50,
              and the maximum is 1000. Minimum= 1 Maximum=1000
        - name: Page
          in: query
          required: false
          schema:
            type: integer
          description: The page index. This value is simply for client state.
        - name: PageToken
          description: The page token. This is provided by the API.
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Data Usage List
          content:
            application/json:
              schema:
                type: object
                properties:
                  data_sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataSession'
                  meta:
                    properties:
                      first_page_url:
                        format: uri
                        type: string
                      key:
                        type: string
                      next_page_url:
                        format: uri
                        nullable: true
                        type: string
                      page:
                        type: integer
                      page_size:
                        type: integer
                      previous_page_url:
                        format: uri
                        nullable: true
                        type: string
                      url:
                        format: uri
                        type: string
                    type: object
                title: ListDataSessionResponse
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff
            'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/DataSessions?PageSize=<integer>&Page=<integer>&PageToken=<string>'
            \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/DataSessions?PageSize=<integer>&Page=<integer>&PageToken=<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/DataSessions?PageSize=<integer>&Page=<integer>&PageToken=<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")   
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/DataSessions?PageSize=<integer>&Page=<integer>&PageToken=<string>")

            {
               MaxTimeout = -1,
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Get);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/DataSessions?PageSize=<integer>&Page=<integer>&PageToken=<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  
                  
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url =
            "https://programmable-wireless.api.korewireless.com/v1/Sims/<string>/DataSessions?PageSize=<integer>&Page=<integer>&PageToken=<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',       
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
  /v1/RatePlans:
    get:
      summary: List Data Rate Plans
      tags:
        - RatePlans Resource
      operationId: listRatePlans
      x-scala-package: v1.usage
      x-tracing-label: ProgrammableWirelessUsageApi:list-data-usage
      parameters:
        - name: PageSize
          in: query
          description: >-
            How many resources to return in each list page. The default is 50,
            and the maximum is 1000.
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: Page
          in: query
          description: The page index. This value is simply for client state.
          schema:
            type: integer
            minimum: 0
        - name: PageToken
          in: query
          description: The page token. This is provided by the API.
          schema:
            type: string
      responses:
        '200':
          description: Data Usage List
          content:
            application/json:
              schema:
                type: object
                properties:
                  rate_plans:
                    type: array
                    items:
                      $ref: '#/components/schemas/RatePlan'
                  meta:
                    properties:
                      first_page_url:
                        format: uri
                        type: string
                      key:
                        type: string
                      next_page_url:
                        format: uri
                        nullable: true
                        type: string
                      page:
                        type: integer
                      page_size:
                        type: integer
                      previous_page_url:
                        format: uri
                        nullable: true
                        type: string
                      url:
                        format: uri
                        type: string
                    type: object
                title: ListRatePlanResponse
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff
            'https://programmable-wireless.api.korewireless.com/v1/RatePlans?PageSize=<integer>&Page=<integer>&PageToken=<string>'
            \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/RatePlans?PageSize=<integer>&Page=<integer>&PageToken=<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',              
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/RatePlans?PageSize=<integer>&Page=<integer>&PageToken=<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")        
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/RatePlans?PageSize=<integer>&Page=<integer>&PageToken=<string>")

            {
               MaxTimeout = -1,
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Get);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/RatePlans?PageSize=<integer>&Page=<integer>&PageToken=<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(                                
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url =
            "https://programmable-wireless.api.korewireless.com/v1/RatePlans?PageSize=<integer>&Page=<integer>&PageToken=<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',  
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
    post:
      summary: Create Data Rate Plans
      tags:
        - RatePlans Resource
      operationId: createRatePlans
      x-scala-package: v1.usage
      x-tracing-label: ProgrammableWirelessUsageApi:list-data-usage
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              title: CreateRatePlanRequest
              properties:
                UniqueName:
                  type: string
                  description: >-
                    An application-defined string that uniquely identifies the
                    resource. It can be used in place of the resource's `sid` in
                    the URL to address the resource.
                FriendlyName:
                  type: string
                  description: >-
                    A descriptive string that you create to describe the
                    resource. It does not have to be unique.
                DataEnabled:
                  type: boolean
                  description: Whether SIMs can use GPRS/3G/4G/LTE data connectivity.
                DataLimit:
                  type: integer
                  description: >-
                    The total data usage (download and upload combined) in
                    Megabytes that the Network allows during one month on the
                    home network (T-Mobile USA). The metering period begins the
                    day of activation and ends on the same day in the following
                    month. Can be up to 2TB and the default value is `1000`.
                DataMetering:
                  type: string
                  description: >-
                    The model used to meter data usage. Can be: `payg` and
                    `quota-1`, `quota-10`, and `quota-50`. Learn more about the
                    available data metering models
                MessagingEnabled:
                  type: boolean
                  description: Whether SIMs can make, send, and receive SMS using Commands.
                VoiceEnabled:
                  type: boolean
                  description: Deprecated.
                NationalRoamingEnabled:
                  type: boolean
                  description: >-
                    Whether SIMs can roam on networks other than the home
                    network (T-Mobile USA) in the United States.
                InternationalRoaming:
                  type: array
                  items:
                    type: string
                  description: >-
                    The list of services that SIMs capable of using
                    GPRS/3G/4G/LTE data connectivity can use outside of the
                    United States. Can contain: `data` and `messaging`.
                NationalRoamingDataLimit:
                  type: integer
                  description: >-
                    The total data usage (download and upload combined) in
                    Megabytes that the Network allows during one month on
                    non-home networks in the United States. The metering period
                    begins the day of activation and ends on the same day in the
                    following month. Can be up to 2TB.
                InternationalRoamingDataLimit:
                  type: integer
                  description: >-
                    The total data usage (download and upload combined) in
                    Megabytes that the Network allows during one month when
                    roaming outside the United States. Can be up to 2TB.
      responses:
        '200':
          description: Data Usage List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatePlan'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '202':
          description: Data Usage List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatePlan'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: |-
            curl --location --globoff 'https://programmable-wireless.api.korewireless.com/v1/RatePlans' \
            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --header 'Accept: application/json' \
            --data-urlencode 'UniqueName=<string>' \
            --data-urlencode 'FriendlyName=<string>' \
            --data-urlencode 'DataEnabled=<boolean>' \
            --data-urlencode 'DataLimit=<integer>' \
            --data-urlencode 'DataMetering=<string>' \
            --data-urlencode 'MessagingEnabled=<boolean>' \
            --data-urlencode 'VoiceEnabled=<boolean>' \
            --data-urlencode 'NationalRoamingEnabled=<boolean>' \
            --data-urlencode 'InternationalRoaming=<string>' \
            --data-urlencode 'InternationalRoaming=<string>' \
            --data-urlencode 'NationalRoamingDataLimit=<integer>' \
            --data-urlencode 'InternationalRoamingDataLimit=<integer>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'POST',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/RatePlans',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',        
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Accept': 'application/json'
               },
               form: {
                  'UniqueName': '<string>',
                  'FriendlyName': '<string>',
                  'DataEnabled': '<boolean>',
                  'DataLimit': '<integer>',
                  'DataMetering': '<string>',
                  'MessagingEnabled': '<boolean>',
                  'VoiceEnabled': '<boolean>',
                  'NationalRoamingEnabled': '<boolean>',
                  'InternationalRoaming': '<string>',
                  'InternationalRoaming': '<string>',
                  'NationalRoamingDataLimit': '<integer>',
                  'InternationalRoamingDataLimit': '<integer>'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: >-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType =
            MediaType.parse("application/x-www-form-urlencoded");

            RequestBody body = RequestBody.create(mediaType,
            "UniqueName=<string>&FriendlyName=<string>&DataEnabled=<boolean>&DataLimit=<integer>&DataMetering=<string>&MessagingEnabled=<boolean>&VoiceEnabled=<boolean>&NationalRoamingEnabled=<boolean>&InternationalRoaming=<string>&InternationalRoaming=<string>&NationalRoamingDataLimit=<integer>&InternationalRoamingDataLimit=<integer>");

            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/RatePlans")
               .method("POST", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Content-Type", "application/x-www-form-urlencoded")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/RatePlans")

            {
               MaxTimeout = -1,
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Post);

            request.AddHeader("Authorization", "<string>");

            request.AddHeader("Content-Type",
            "application/x-www-form-urlencoded");

            request.AddHeader("Accept", "application/json");

            request.AddParameter("UniqueName", "<string>");

            request.AddParameter("FriendlyName", "<string>");

            request.AddParameter("DataEnabled", "<boolean>");

            request.AddParameter("DataLimit", "<integer>");

            request.AddParameter("DataMetering", "<string>");

            request.AddParameter("MessagingEnabled", "<boolean>");

            request.AddParameter("VoiceEnabled", "<boolean>");

            request.AddParameter("NationalRoamingEnabled", "<boolean>");

            request.AddParameter("InternationalRoaming", "<string>");

            request.AddParameter("InternationalRoaming", "<string>");

            request.AddParameter("NationalRoamingDataLimit", "<integer>");

            request.AddParameter("InternationalRoamingDataLimit", "<integer>");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/RatePlans',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'POST',
               CURLOPT_HTTPHEADER => array(
               'Content-Type: application/json',
               'Authorization: Bearer <YOUR_AUTH_TOKEN>',
               CURLOPT_POSTFIELDS => 'UniqueName=<string>&FriendlyName=<string>&DataEnabled=<boolean>&DataLimit=<integer>&DataMetering=<string>&MessagingEnabled=<boolean>&VoiceEnabled=<boolean>&NationalRoamingEnabled=<boolean>&InternationalRoaming=<string>&InternationalRoaming=<string>&NationalRoamingDataLimit=<integer>&InternationalRoamingDataLimit=<integer>',
               CURLOPT_HTTPHEADER => array(
                  'Content-Type: application/x-www-form-urlencoded',
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/RatePlans"


            payload =
            'UniqueName=<string>&FriendlyName=<string>&DataEnabled=<boolean>&DataLimit=<integer>&DataMetering=<string>&MessagingEnabled=<boolean>&VoiceEnabled=<boolean>&NationalRoamingEnabled=<boolean>&InternationalRoaming=<string>&InternationalRoaming=<string>&NationalRoamingDataLimit=<integer>&InternationalRoamingDataLimit=<integer>'

            headers = {
               'Authorization': '<string>',
               'Content-Type': 'application/x-www-form-urlencoded',
               'Accept': 'application/json'
            }


            response = requests.request("POST", url, headers=headers,
            data=payload)


            print(response.text)
  /v1/RatePlans/{Sid}:
    parameters:
      - name: Sid
        in: path
        description: The SID of the RatePlan resource to fetch.
        schema:
          type: string
        required: true
    get:
      summary: Get Data Rate Plan
      tags:
        - RatePlans Resource
      operationId: getRatePlan
      responses:
        '200':
          description: Get Rate Plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatePlan'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: |-
            curl --location --globoff 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>' \
            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',                
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")        
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>")

            {
               MaxTimeout = -1,
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Get);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',    
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
    post:
      summary: Update Rate Plan
      tags:
        - RatePlans Resource
      operationId: updateRatePlan
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              title: UpdateRatePlanRequest
              properties:
                UniqueName:
                  type: string
                  description: >-
                    An application-defined string that uniquely identifies the
                    resource. It can be used in place of the resource's `sid` in
                    the URL to address the resource.
                FriendlyName:
                  type: string
                  description: >-
                    A descriptive string that you create to describe the
                    resource. It does not have to be unique.
      responses:
        '200':
          description: Data Usage Update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatePlan'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: |-
            curl --location --globoff 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>' \
            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --header 'Accept: application/json' \
            --data-urlencode 'UniqueName=<string>' \
            --data-urlencode 'FriendlyName=<string>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'POST',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',            
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Accept': 'application/json'
               },
               form: {
                  'UniqueName': '<string>',
                  'FriendlyName': '<string>'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: >-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType =
            MediaType.parse("application/x-www-form-urlencoded");

            RequestBody body = RequestBody.create(mediaType,
            "UniqueName=<string>&FriendlyName=<string>");

            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>")
               .method("POST", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Content-Type", "application/x-www-form-urlencoded")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>")

            {
               MaxTimeout = -1,
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Post);

            request.AddHeader("Authorization", "<string>");

            request.AddHeader("Content-Type",
            "application/x-www-form-urlencoded");

            request.AddHeader("Accept", "application/json");

            request.AddParameter("UniqueName", "<string>");

            request.AddParameter("FriendlyName", "<string>");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'POST',
               CURLOPT_HTTPHEADER => array(
               'Content-Type: application/json',
               'Authorization: Bearer <YOUR_AUTH_TOKEN>',
               CURLOPT_POSTFIELDS => 'UniqueName=<string>&FriendlyName=<string>',
               CURLOPT_HTTPHEADER => array(
                  'Content-Type: application/x-www-form-urlencoded',
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>"


            payload = 'UniqueName=<string>&FriendlyName=<string>'

            headers = {
               'Authorization': '<string>',
               'Content-Type': 'application/x-www-form-urlencoded',
               'Accept': 'application/json'
            }


            response = requests.request("POST", url, headers=headers,
            data=payload)


            print(response.text)
    delete:
      summary: Delete Data Rate Plan
      tags:
        - RatePlans Resource
      operationId: deleteRatePlan
      responses:
        '204':
          description: The resource was deleted successfully.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '409':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff --request DELETE
            'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>' \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'DELETE',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>")
               .method("DELETE", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>")

            {
               MaxTimeout = -1,
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Delete);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'DELETE',
               CURLOPT_HTTPHEADER => array(
                  'Authorization: Bearer <YOUR_AUTH_TOKEN>',
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/RatePlans/<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Accept': 'application/json'
            }


            response = requests.request("DELETE", url, headers=headers,
            data=payload)


            print(response.text)
  /v1/Sims:
    get:
      summary: List Sims
      tags:
        - Sims Resource
      operationId: listSims
      parameters:
        - name: Status
          in: query
          description: Only return Sim resources with this status.
          schema:
            $ref: '#/components/schemas/SimStatus'
        - name: Iccid
          in: query
          description: >-
            Only return Sim resources with this ICCID. This will return a list
            with a maximum size of 1.
          schema:
            type: string
          examples:
            readEmpty:
              value: iccid
            readFull:
              value: iccid
        - name: RatePlan
          in: query
          description: >-
            The SID or unique name of a RatePlan resource. Only return Sim
            resources assigned to this RatePlan resource.
          schema:
            type: string
          examples:
            readEmpty:
              value: rate_plan
            readFull:
              value: rate_plan
        - name: EId
          in: query
          description: Deprecated.
          schema:
            type: string
        - name: SimRegistrationCode
          in: query
          description: >-
            Only return Sim resources with this registration code. This will
            return a list with a maximum size of 1.
          schema:
            type: string
        - name: PageSize
          in: query
          description: >-
            How many resources to return in each list page. The default is 50,
            and the maximum is 1000.
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: Page
          in: query
          description: The page index. This value is simply for client state.
          schema:
            type: integer
            minimum: 0
        - name: PageToken
          in: query
          description: The page token. This is provided by the API.
          schema:
            type: string
      responses:
        '200':
          description: Data Usage List
          content:
            application/json:
              schema:
                type: object
                properties:
                  sims:
                    type: array
                    items:
                      $ref: '#/components/schemas/Sim'
                  meta:
                    properties:
                      first_page_url:
                        format: uri
                        type: string
                      key:
                        type: string
                      next_page_url:
                        format: uri
                        nullable: true
                        type: string
                      page:
                        type: integer
                      page_size:
                        type: integer
                      previous_page_url:
                        format: uri
                        nullable: true
                        type: string
                      url:
                        format: uri
                        type: string
                    type: object
                title: ListSimsResponse
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff
            'https://programmable-wireless.api.korewireless.com/v1/Sims?Status=<string>&Iccid=<string>&RatePlan=<string>&EId=<string>&SimRegistrationCode=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>'
            \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Sims?Status=<string>&Iccid=<string>&RatePlan=<string>&EId=<string>&SimRegistrationCode=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Sims?Status=<string>&Iccid=<string>&RatePlan=<string>&EId=<string>&SimRegistrationCode=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Sims?Status=<string>&Iccid=<string>&RatePlan=<string>&EId=<string>&SimRegistrationCode=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>")

            {
               MaxTimeout = -1,    
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Get);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Sims?Status=<string>&Iccid=<string>&RatePlan=<string>&EId=<string>&SimRegistrationCode=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url =
            "https://programmable-wireless.api.korewireless.com/v1/Sims?Status=<string>&Iccid=<string>&RatePlan=<string>&EId=<string>&SimRegistrationCode=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
  /v1/Sims/{Sid}:
    parameters:
      - name: Sid
        in: path
        description: The SID of the RatePlan resource to fetch.
        schema:
          type: string
        required: true
    get:
      summary: Get a Sim
      tags:
        - Sims Resource
      operationId: getASim
      responses:
        '200':
          description: Get Sim
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sim'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: |-
            curl --location --globoff 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>' \
            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: |-
            var options = new RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>")
            {
               MaxTimeout = -1,    
            };
            var client = new RestClient(options);
            var request = new RestRequest("", Method.Get);
            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");
            request.AddHeader("Accept", "application/json");
            RestResponse response = await client.ExecuteAsync(request);
            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/Sims/<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
    post:
      summary: Update A Sim
      tags:
        - Sims Resource
      operationId: updateASim
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              title: UpdateSimRequest
              properties:
                UniqueName:
                  type: string
                  description: >-
                    An application-defined string that uniquely identifies the
                    resource. It can be used in place of the `sid` in the URL
                    path to address the resource.
                CallbackMethod:
                  type: string
                  format: http-method
                  enum:
                    - GET
                    - POST
                  description: >-
                    The HTTP method we should use to call `callback_url`. Can
                    be: `POST` or `GET`. The default is `POST`.
                CallbackUrl:
                  type: string
                  format: uri
                  description: >-
                    The URL we should call using the `callback_url` when the SIM
                    has finished updating. When the SIM transitions from `new`
                    to `ready` or from any status to `deactivated`, we call this
                    URL when the status changes to an intermediate status
                    (`ready` or `deactivated`) and again when the status changes
                    to its final status (`active` or `canceled`).
                FriendlyName:
                  type: string
                  description: >-
                    A descriptive string that you create to describe the Sim
                    resource. It does not need to be unique.
                RatePlan:
                  type: string
                  description: >-
                    The SID or unique name of the RatePlan resource to which the
                    Sim resource should be assigned.
                Status:
                  $ref: '#/components/schemas/SimStatus'
                CommandsCallbackMethod:
                  type: string
                  format: http-method
                  enum:
                    - GET
                    - POST
                  description: >-
                    The HTTP method we should use to call
                    `commands_callback_url`. Can be: `POST` or `GET`. The
                    default is `POST`.
                CommandsCallbackUrl:
                  type: string
                  format: uri
                  description: >-
                    The URL we should call using the `commands_callback_method`
                    when the SIM sends a Command. Your server should respond
                    with an HTTP status code in the 200 range; any response body
                    is ignored.
                SmsFallbackMethod:
                  type: string
                  format: http-method
                  enum:
                    - GET
                    - POST
                  description: >-
                    The HTTP method we should use to call `sms_fallback_url`.
                    Can be: `GET` or `POST`. Default is `POST`.
                SmsFallbackUrl:
                  type: string
                  format: uri
                  description: >-
                    The URL we should call using the `sms_fallback_method` when
                    an error occurs while retrieving or executing the TwiML
                    requested from `sms_url`.
                SmsMethod:
                  type: string
                  format: http-method
                  enum:
                    - GET
                    - POST
                  description: >-
                    The HTTP method we should use to call `sms_url`. Can be:
                    `GET` or `POST`. Default is `POST`.
                SmsUrl:
                  type: string
                  format: uri
                  description: >-
                    The URL we should call using the `sms_method` when the
                    SIM-connected device sends an SMS message that is not a
                    Command.
                VoiceFallbackMethod:
                  type: string
                  format: http-method
                  enum:
                    - GET
                    - POST
                  description: Deprecated.
                VoiceFallbackUrl:
                  type: string
                  format: uri
                  description: Deprecated.
                VoiceMethod:
                  type: string
                  format: http-method
                  enum:
                    - GET
                    - POST
                  description: Deprecated.
                VoiceUrl:
                  type: string
                  format: uri
                  description: Deprecated.
                ResetStatus:
                  $ref: '#/components/schemas/SimResetStatus'
                AccountSid:
                  type: string
                  description: >-
                    The SID of the Account to which the Sim resource should
                    belong. The Account SID can only be that of the requesting
                    Account or that of a Subaccount of the requesting Account.
                    Only valid when the Sim resource's status is `new`. For more
                    information, see the Move SIMs between Subaccounts
                    documentation.
      responses:
        '200':
          description: Data Usage Update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sim'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: |-
            curl --location --globoff 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>' \
            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --header 'Accept: application/json' \
            --data-urlencode 'UniqueName=<string>' \
            --data-urlencode 'CallbackMethod=<http-method>' \
            --data-urlencode 'CallbackUrl=<uri>' \
            --data-urlencode 'FriendlyName=<string>' \
            --data-urlencode 'RatePlan=<string>' \
            --data-urlencode 'Status=<string>' \
            --data-urlencode 'CommandsCallbackMethod=<http-method>' \
            --data-urlencode 'CommandsCallbackUrl=<uri>' \
            --data-urlencode 'SmsFallbackMethod=<http-method>' \
            --data-urlencode 'SmsFallbackUrl=<uri>' \
            --data-urlencode 'SmsMethod=<http-method>' \
            --data-urlencode 'SmsUrl=<uri>' \
            --data-urlencode 'VoiceFallbackMethod=<http-method>' \
            --data-urlencode 'VoiceFallbackUrl=<uri>' \
            --data-urlencode 'VoiceMethod=<http-method>' \
            --data-urlencode 'VoiceUrl=<uri>' \
            --data-urlencode 'ResetStatus=<string>' \
            --data-urlencode 'AccountSid=<string>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'POST',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Accept': 'application/json'
               },
               form: {
                  'UniqueName': '<string>',
                  'CallbackMethod': '<http-method>',
                  'CallbackUrl': '<uri>',
                  'FriendlyName': '<string>',
                  'RatePlan': '<string>',
                  'Status': '<string>',
                  'CommandsCallbackMethod': '<http-method>',
                  'CommandsCallbackUrl': '<uri>',
                  'SmsFallbackMethod': '<http-method>',
                  'SmsFallbackUrl': '<uri>',
                  'SmsMethod': '<http-method>',
                  'SmsUrl': '<uri>',
                  'VoiceFallbackMethod': '<http-method>',
                  'VoiceFallbackUrl': '<uri>',
                  'VoiceMethod': '<http-method>',
                  'VoiceUrl': '<uri>',
                  'ResetStatus': '<string>',
                  'AccountSid': '<string>'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: >-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType =
            MediaType.parse("application/x-www-form-urlencoded");

            RequestBody body = RequestBody.create(mediaType,
            "UniqueName=<string>&CallbackMethod=<http-method>&CallbackUrl=<uri>&FriendlyName=<string>&RatePlan=<string>&Status=<string>&CommandsCallbackMethod=<http-method>&CommandsCallbackUrl=<uri>&SmsFallbackMethod=<http-method>&SmsFallbackUrl=<uri>&SmsMethod=<http-method>&SmsUrl=<uri>&VoiceFallbackMethod=<http-method>&VoiceFallbackUrl=<uri>&VoiceMethod=<http-method>&VoiceUrl=<uri>&ResetStatus=<string>&AccountSid=<string>");

            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>")
               .method("POST", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Content-Type", "application/x-www-form-urlencoded")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>")

            {
               MaxTimeout = -1,    
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Post);

            request.AddHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Content-Type",
            "application/x-www-form-urlencoded");

            request.AddHeader("Accept", "application/json");

            request.AddParameter("UniqueName", "<string>");

            request.AddParameter("CallbackMethod", "<http-method>");

            request.AddParameter("CallbackUrl", "<uri>");

            request.AddParameter("FriendlyName", "<string>");

            request.AddParameter("RatePlan", "<string>");

            request.AddParameter("Status", "<string>");

            request.AddParameter("CommandsCallbackMethod", "<http-method>");

            request.AddParameter("CommandsCallbackUrl", "<uri>");

            request.AddParameter("SmsFallbackMethod", "<http-method>");

            request.AddParameter("SmsFallbackUrl", "<uri>");

            request.AddParameter("SmsMethod", "<http-method>");

            request.AddParameter("SmsUrl", "<uri>");

            request.AddParameter("VoiceFallbackMethod", "<http-method>");

            request.AddParameter("VoiceFallbackUrl", "<uri>");

            request.AddParameter("VoiceMethod", "<http-method>");

            request.AddParameter("VoiceUrl", "<uri>");

            request.AddParameter("ResetStatus", "<string>");

            request.AddParameter("AccountSid", "<string>");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'POST',
               CURLOPT_HTTPHEADER => array(
               'Content-Type: application/json',
               'Authorization: Bearer <YOUR_AUTH_TOKEN>',
               CURLOPT_POSTFIELDS => 'UniqueName=<string>&CallbackMethod=<http-method>&CallbackUrl=<uri>&FriendlyName=<string>&RatePlan=<string>&Status=<string>&CommandsCallbackMethod=<http-method>&CommandsCallbackUrl=<uri>&SmsFallbackMethod=<http-method>&SmsFallbackUrl=<uri>&SmsMethod=<http-method>&SmsUrl=<uri>&VoiceFallbackMethod=<http-method>&VoiceFallbackUrl=<uri>&VoiceMethod=<http-method>&VoiceUrl=<uri>&ResetStatus=<string>&AccountSid=<string>',
               CURLOPT_HTTPHEADER => array(
                  'Content-Type: application/x-www-form-urlencoded',
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/Sims/<string>"


            payload =
            'UniqueName=<string>&CallbackMethod=<http-method>&CallbackUrl=<uri>&FriendlyName=<string>&RatePlan=<string>&Status=<string>&CommandsCallbackMethod=<http-method>&CommandsCallbackUrl=<uri>&SmsFallbackMethod=<http-method>&SmsFallbackUrl=<uri>&SmsMethod=<http-method>&SmsUrl=<uri>&VoiceFallbackMethod=<http-method>&VoiceFallbackUrl=<uri>&VoiceMethod=<http-method>&VoiceUrl=<uri>&ResetStatus=<string>&AccountSid=<string>'

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Content-Type': 'application/x-www-form-urlencoded',
               'Accept': 'application/json'
            }


            response = requests.request("POST", url, headers=headers,
            data=payload)


            print(response.text)
    delete:
      summary: Delete a Sim
      tags:
        - Sims Resource
      operationId: deleteASim
      responses:
        '204':
          description: The resource was deleted successfully.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '409':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff --request DELETE
            'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>' \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'DELETE',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',                
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>")
               .method("DELETE", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")         
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: |-
            var options = new RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Sims/<string>")
            {
               MaxTimeout = -1,    
            };
            var client = new RestClient(options);
            var request = new RestRequest("", Method.Delete);
            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");
            request.AddHeader("Accept", "application/json");
            RestResponse response = await client.ExecuteAsync(request);
            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Sims/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'DELETE',
               CURLOPT_HTTPHEADER => array(
                  'Authorization: Bearer <YOUR_AUTH_TOKEN>',
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/Sims/<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Accept': 'application/json'
            }


            response = requests.request("DELETE", url, headers=headers,
            data=payload)


            print(response.text)
  /v1/Commands:
    get:
      summary: List Commands
      tags:
        - Commands Resource
      operationId: listCommands
      parameters:
        - name: Sim
          in: query
          description: The `sid` or `unique_name` of the Sim resources to read.
          schema:
            type: string
          examples:
            readEmpty:
              value: sim
            readFull:
              value: sim
            readIp:
              value: sim
        - name: Status
          in: query
          description: >-
            The status of the resources to read. Can be: `queued`, `sent`,
            `delivered`, `received`, or `failed`.
          schema:
            $ref: '#/components/schemas/CommandStatus'
          examples:
            readEmpty:
              value: queued
            readFull:
              value: queued
            readIp:
              value: queued
        - name: Direction
          in: query
          description: Only return Commands with this direction value.
          schema:
            $ref: '#/components/schemas/CommandDirection'
          examples:
            readEmpty:
              value: from_sim
            readFull:
              value: from_sim
            readIp:
              value: to_sim
        - name: Transport
          in: query
          description: >-
            Only return Commands with this transport value. Can be: `sms` or
            `ip`.
          schema:
            $ref: '#/components/schemas/CommandTransport'
          examples:
            readIp:
              value: ip
        - name: PageSize
          in: query
          description: >-
            How many resources to return in each list page. The default is 50,
            and the maximum is 1000.
          schema:
            type: integer
            minimum: 1
            maximum: 1000
        - name: Page
          in: query
          description: The page index. This value is simply for client state.
          schema:
            type: integer
            minimum: 0
        - name: PageToken
          in: query
          description: The page token. This is provided by the API.
          schema:
            type: string
      responses:
        '200':
          description: Data Usage List
          content:
            application/json:
              schema:
                type: object
                properties:
                  commands:
                    type: array
                    items:
                      $ref: '#/components/schemas/Command'
                  meta:
                    properties:
                      first_page_url:
                        format: uri
                        type: string
                      key:
                        type: string
                      next_page_url:
                        format: uri
                        nullable: true
                        type: string
                      page:
                        type: integer
                      page_size:
                        type: integer
                      previous_page_url:
                        format: uri
                        nullable: true
                        type: string
                      url:
                        format: uri
                        type: string
                    type: object
                title: ListCommandResponse
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff
            'https://programmable-wireless.api.korewireless.com/v1/Commands?Sim=<string>&Status=<string>&Direction=<string>&Transport=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>'
            \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Commands?Sim=<string>&Status=<string>&Direction=<string>&Transport=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Commands?Sim=<string>&Status=<string>&Direction=<string>&Transport=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Commands?Sim=<string>&Status=<string>&Direction=<string>&Transport=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>")

            {
               MaxTimeout = -1,    
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Get);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Commands?Sim=<string>&Status=<string>&Direction=<string>&Transport=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url =
            "https://programmable-wireless.api.korewireless.com/v1/Commands?Sim=<string>&Status=<string>&Direction=<string>&Transport=<string>&PageSize=<integer>&Page=<integer>&PageToken=<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
    post:
      summary: Send a Command to a Sim.
      tags:
        - Commands Resource
      operationId: sendCommand
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              title: CreateCommandRequest
              properties:
                Command:
                  type: string
                  description: >-
                    The message body of the Command. Can be plain text in text
                    mode or a Base64 encoded byte string in binary mode.
                Sim:
                  type: string
                  description: >-
                    The `sid` or `unique_name` of the SIM to send the Command
                    to.
                CallbackMethod:
                  type: string
                  format: http-method
                  enum:
                    - GET
                    - POST
                  description: >-
                    The HTTP method we use to call `callback_url`. Can be:
                    `POST` or `GET`, and the default is `POST`.
                CallbackUrl:
                  type: string
                  format: uri
                  description: >-
                    The URL we call using the `callback_url` when the Command
                    has finished sending, whether the command was delivered or
                    it failed.
                CommandMode:
                  $ref: '#/components/schemas/CommandMode'
                IncludeSid:
                  type: string
                  description: >-
                    Whether to include the SID of the command in the message
                    body. Can be: `none`, `start`, or `end`, and the default
                    behavior is `none`. When sending a Command to a SIM in text
                    mode, we can automatically include the SID of the Command in
                    the message body, which could be used to ensure that the
                    device does not process the same Command more than once.  A
                    value of `start` will prepend the message with the Command
                    SID, and `end` will append it to the end, separating the
                    Command SID from the message body with a space. The length
                    of the Command SID is included in the 160 character limit so
                    the SMS body must be 128 characters or less before the
                    Command SID is included.
                DeliveryReceiptRequested:
                  type: boolean
                  description: >-
                    Whether to request delivery receipt from the recipient. For
                    Commands that request delivery receipt, the Command state
                    transitions to 'delivered' once the server has received a
                    delivery receipt from the device. The default value is
                    `true`.
              required:
                - Command
      responses:
        '201':
          description: Data Usage List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '202':
          description: Data Usage List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: |-
            curl --location --globoff 'https://programmable-wireless.api.korewireless.com/v1/Commands' \
            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --header 'Accept: application/json' \
            --data-urlencode 'Command=<string>' \
            --data-urlencode 'Sim=<string>' \
            --data-urlencode 'CallbackMethod=<http-method>' \
            --data-urlencode 'CallbackUrl=<uri>' \
            --data-urlencode 'CommandMode=text' \
            --data-urlencode 'IncludeSid=<string>' \
            --data-urlencode 'DeliveryReceiptRequested=<boolean>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'POST',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Commands',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',   
                  'Content-Type': 'application/x-www-form-urlencoded',
                  'Accept': 'application/json'
               },
               form: {
                  'Command': '<string>',
                  'Sim': '<string>',
                  'CallbackMethod': '<http-method>',
                  'CallbackUrl': '<uri>',
                  'CommandMode': 'text',
                  'IncludeSid': '<string>',
                  'DeliveryReceiptRequested': '<boolean>'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: >-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType =
            MediaType.parse("application/x-www-form-urlencoded");

            RequestBody body = RequestBody.create(mediaType,
            "Command=<string>&Sim=<string>&CallbackMethod=<http-method>&CallbackUrl=<uri>&CommandMode=text&IncludeSid=<string>&DeliveryReceiptRequested=<boolean>");

            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Commands")
               .method("POST", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Content-Type", "application/x-www-form-urlencoded")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Commands")

            {
               MaxTimeout = -1,    
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Post);

            request.AddHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Content-Type",
            "application/x-www-form-urlencoded");

            request.AddHeader("Accept", "application/json");

            request.AddParameter("Command", "<string>");

            request.AddParameter("Sim", "<string>");

            request.AddParameter("CallbackMethod", "<http-method>");

            request.AddParameter("CallbackUrl", "<uri>");

            request.AddParameter("CommandMode", "text");

            request.AddParameter("IncludeSid", "<string>");

            request.AddParameter("DeliveryReceiptRequested", "<boolean>");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Commands',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'POST',
               CURLOPT_HTTPHEADER => array(
               'Content-Type: application/json',
               'Authorization: Bearer <YOUR_AUTH_TOKEN>',
               CURLOPT_POSTFIELDS => 'Command=<string>&Sim=<string>&CallbackMethod=<http-method>&CallbackUrl=<uri>&CommandMode=text&IncludeSid=<string>&DeliveryReceiptRequested=<boolean>',
               CURLOPT_HTTPHEADER => array(
                  'Content-Type: application/x-www-form-urlencoded',
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/Commands"


            payload =
            'Command=<string>&Sim=<string>&CallbackMethod=<http-method>&CallbackUrl=<uri>&CommandMode=text&IncludeSid=<string>&DeliveryReceiptRequested=<boolean>'

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Content-Type': 'application/x-www-form-urlencoded',
               'Accept': 'application/json'
            }


            response = requests.request("POST", url, headers=headers,
            data=payload)


            print(response.text)
  /v1/Commands/{Sid}:
    parameters:
      - name: Sid
        in: path
        description: The SID of the RatePlan resource to fetch.
        schema:
          type: string
        required: true
    get:
      summary: Fetch a Command instance from your account.
      tags:
        - Commands Resource
      operationId: getCommand
      responses:
        '200':
          description: Get Command
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Command'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '415':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '422':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: |-
            curl --location --globoff 'https://programmable-wireless.api.korewireless.com/v1/Commands/<string>' \
            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'GET',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Commands/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Commands/<string>")
               .method("GET", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Commands/<string>")

            {
               MaxTimeout = -1,    
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Get);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Commands/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'GET',
               CURLOPT_HTTPHEADER => array(
               'Authorization: Bearer <YOUR_AUTH_TOKEN>'
               CURLOPT_HTTPHEADER => array(
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/Commands/<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>',
               'Accept': 'application/json'
            }


            response = requests.request("GET", url, headers=headers,
            data=payload)


            print(response.text)
    delete:
      summary: Delete a Command instance from your account.
      tags:
        - Commands Resource
      operationId: deleteCommand
      responses:
        '202':
          description: The resource was deleted successfully.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '204':
          description: The resource was deleted successfully.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '401':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '403':
          description: >-
            Credentials were not provided and are required to access this
            resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '503':
          description: Server is temporary not available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageApiErrorResponse'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Credentials:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      x-code-samples:
        - lang: cURL
          label: cURL
          source: >-
            curl --location --globoff --request DELETE
            'https://programmable-wireless.api.korewireless.com/v1/Commands/<string>' \

            --header 'Authorization: Bearer <YOUR_AUTH_TOKEN>'
        - lang: js
          label: NodeJs
          source: |
            var request = require('request');
            var options = {
               'method': 'DELETE',
               'url': 'https://programmable-wireless.api.korewireless.com/v1/Commands/<string>',
               'headers': {
                  'Authorization': 'Bearer <YOUR_AUTH_TOKEN>', 
                  'Accept': 'application/json'
               }
            };
            request(options, function (error, response) {
               if (error) throw new Error(error);
               console.log(response.body);
            });
        - lang: java
          label: Java
          source: |-
            OkHttpClient client = new OkHttpClient().newBuilder()
               .build();
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, "");
            Request request = new Request.Builder()
               .url("https://programmable-wireless.api.korewireless.com/v1/Commands/<string>")
               .method("DELETE", body)
               .addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>")
               .addHeader("Accept", "application/json")
               .build();
            Response response = client.newCall(request).execute();
        - lang: cs
          label: C#
          source: >-
            var options = new
            RestClientOptions("https://programmable-wireless.api.korewireless.com/v1/Commands/<string>")

            {
               MaxTimeout = -1,    
            };

            var client = new RestClient(options);

            var request = new RestRequest("", Method.Delete);

            request.addHeader("Authorization", "Bearer <YOUR_AUTH_TOKEN>");

            request.AddHeader("Accept", "application/json");

            RestResponse response = await client.ExecuteAsync(request);

            Console.WriteLine(response.Content);
        - lang: PHP
          label: Php
          source: |
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
               CURLOPT_URL => 'https://programmable-wireless.api.korewireless.com/v1/Commands/<string>',
               CURLOPT_RETURNTRANSFER => true,
               CURLOPT_ENCODING => '',
               CURLOPT_MAXREDIRS => 10,
               CURLOPT_TIMEOUT => 0,
               CURLOPT_FOLLOWLOCATION => true,
               CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
               CURLOPT_CUSTOMREQUEST => 'DELETE',
               CURLOPT_HTTPHEADER => array(
                  'Authorization: Bearer <YOUR_AUTH_TOKEN>',
                  'Accept: application/json'
               ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            echo $response;
        - lang: py
          label: Python
          source: >
            import requests


            url = "https://programmable-wireless.api.korewireless.com/v1/Commands/<string>"


            payload = {}

            headers = {
               'Authorization': 'Bearer <YOUR_AUTH_TOKEN>', 
               'Accept': 'application/json'
            }


            response = requests.request("DELETE", url, headers=headers,
            data=payload)


            print(response.text)
components:
  schemas:
    UsageList:
      type: object
      properties:
        usage_records:
          type: array
          items:
            $ref: '#/components/schemas/UsageRecord'
        meta:
          $ref: '#/components/schemas/ListMeta'
    SIMUsageList:
      type: object
      properties:
        usage_records:
          type: array
          items:
            $ref: '#/components/schemas/SIMUsageRecord'
        meta:
          $ref: '#/components/schemas/ListMeta'
    UsageRecord:
      type: object
      properties:
        period:
          $ref: '#/components/schemas/TimePeriod'
        account_sid:
          description: >-
            The SID of the Account that created the AccountUsageRecord
            resource.Pattern:^AC[0-9a-fA-F]{32}$, Min length=34, Max length=34
          type: string
          x-jvm-type: AccountSid
        commands:
          $ref: '#/components/schemas/CommandsUsageDetails'
        data:
          $ref: '#/components/schemas/DataUsageDetails'
    SIMUsageRecord:
      type: object
      allOf:
        - $ref: '#/components/schemas/UsageRecord'
        - type: object
          properties:
            sim_sid:
              type: string
    DataUsageDetails:
      type: object
      description: >-
        An object that describes the aggregated Data usage for all SIMs over the
        period.
      properties:
        download:
          type: integer
          format: int64
        upload:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
        units:
          type: string
        billed:
          type: number
          format: double
          x-jvm-type: BigDecimal
        home:
          $ref: '#/components/schemas/DataUsageCounts'
        national_roaming:
          $ref: '#/components/schemas/DataUsageCounts'
        international_roaming:
          type: array
          items:
            $ref: '#/components/schemas/InternationalDataUsageCounts'
        billing_units:
          type: string
    DataUsageCounts:
      type: object
      properties:
        download:
          type: integer
          format: int64
        upload:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
        units:
          type: string
        billed:
          type: number
          format: double
          x-jvm-type: BigDecimal
        billing_units:
          type: string
      required:
        - download
        - upload
        - total
        - units
        - billed
        - billing_units
    InternationalDataUsageCounts:
      type: object
      properties:
        country_code:
          type: string
        download:
          type: integer
          format: int64
        upload:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
        units:
          type: string
        billed:
          type: number
          format: double
          x-jvm-type: BigDecimal
        billing_units:
          type: string
      required:
        - country_code
        - download
        - upload
        - total
        - units
        - billed
        - billing_units
    CommandsUsageDetails:
      type: object
      description: >-
        An object that describes the aggregated Commands usage for all SIMs
        during the specified period.
      properties:
        from_sim:
          type: integer
          format: int64
        to_sim:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
        billed:
          type: number
          format: double
          x-jvm-type: BigDecimal
        home:
          $ref: '#/components/schemas/CommandsUsageCounts'
        national_roaming:
          $ref: '#/components/schemas/CommandsUsageCounts'
        international_roaming:
          type: array
          items:
            $ref: '#/components/schemas/InternationalCommandsUsageCounts'
        billing_units:
          type: string
    CommandsUsageCounts:
      type: object
      properties:
        from_sim:
          type: integer
          format: int64
        to_sim:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
        billed:
          type: number
          format: double
          x-jvm-type: BigDecimal
        billing_units:
          type: string
      required:
        - from_sim
        - to_sim
        - total
        - billed
        - billing_units
    InternationalCommandsUsageCounts:
      type: object
      properties:
        country_code:
          type: string
        from_sim:
          type: integer
          format: int64
        to_sim:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
        billed:
          type: number
          format: double
          x-jvm-type: BigDecimal
        billing_units:
          type: string
      required:
        - country_code
        - from_sim
        - to_sim
        - total
        - billed
        - billing_units
    TimePeriod:
      type: object
      description: >-
        The time period for which usage is reported. Contains start and end
        properties that describe the period using GMT date-time values specified
        in ISO 8601 format.
      properties:
        start:
          type: string
          x-jvm-type: java.time.Instant
        end:
          type: string
          x-jvm-type: java.time.Instant
      required:
        - start
        - end
    ListMeta:
      type: object
      required:
        - list_key
        - page_size
        - direct_token
      properties:
        page_size:
          type: integer
          default: 0
          format: int32
        page:
          type: integer
          default: 0
        first_page_url:
          type: string
        previous_page_url:
          type: string
        url:
          type: string
        key:
          type: string
        next_page_url:
          type: string
    UsageApiErrorResponse:
      type: object
      properties:
        code:
          description: Error Code
          type: integer
          format: int32
        status:
          description: HTTP Status Code
          type: integer
          format: int32
        message:
          description: Error Message
          type: string
        more_info:
          description: Internal Error Message
          type: string
      required:
        - code
        - status
        - message
    Granularity:
      type: string
      enum:
        - all
        - daily
        - hourly
    RatePlan:
      type: object
      properties:
        sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^WP[0-9a-fA-F]{32}$
          nullable: true
          description: The unique string that we created to identify the RatePlan resource.
        unique_name:
          type: string
          nullable: true
          description: >-
            An application-defined string that uniquely identifies the resource.
            It can be used in place of the resource's `sid` in the URL to
            address the resource.
        account_sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          nullable: true
          description: The SID of the Account that created the RatePlan resource.
        friendly_name:
          type: string
          nullable: true
          description: The string that you assigned to describe the resource.
        data_enabled:
          type: boolean
          nullable: true
          description: Whether SIMs can use GPRS/3G/4G/LTE data connectivity.
        data_metering:
          type: string
          nullable: true
          description: >-
            The model used to meter data usage. Can be: `payg` and `quota-1`,
            `quota-10`, and `quota-50`. Learn more about the available data
            metering models
        data_limit:
          type: integer
          nullable: true
          description: >-
            The total data usage (download and upload combined) in Megabytes
            that the Network allows during one month on the home network
            (T-Mobile USA). The metering period begins the day of activation and
            ends on the same day in the following month. Can be up to 2TB.
        messaging_enabled:
          type: boolean
          nullable: true
          description: Whether SIMs can make, send, and receive SMS using Commands.
        voice_enabled:
          type: boolean
          nullable: true
          description: Deprecated. Whether SIMs can make and receive voice calls.
        national_roaming_enabled:
          type: boolean
          nullable: true
          description: >-
            Whether SIMs can roam on networks other than the home network
            (T-Mobile USA) in the United States.
        national_roaming_data_limit:
          type: integer
          nullable: true
          description: >-
            The total data usage (download and upload combined) in Megabytes
            that the Network allows during one month on non-home networks in the
            United States. The metering period begins the day of activation and
            ends on the same day in the following month. Can be up to 2TB.
        international_roaming:
          type: array
          items:
            type: string
          nullable: true
          description: >-
            The list of services that SIMs capable of using GPRS/3G/4G/LTE data
            connectivity can use outside of the United States. Can contain:
            `data` and `messaging`.
        international_roaming_data_limit:
          type: integer
          nullable: true
          description: >-
            The total data usage (download and upload combined) in Megabytes
            that the Network allows during one month when roaming outside the
            United States. Can be up to 2TB.
        date_created:
          type: string
          format: date-time
          nullable: true
          description: >-
            The date and time in GMT when the resource was created specified in
            ISO 8601 format.
        date_updated:
          type: string
          format: date-time
          nullable: true
          description: >-
            The date and time in GMT when the resource was last updated
            specified in ISO 8601 format.
        url:
          type: string
          format: uri
          nullable: true
          description: The absolute URL of the resource.
        usage_notification_url:
          type: string
        usage_notification_method:
          type: string
        data_limit_strategy:
          type: string
    SimStatus:
      type: string
      description: >-
        The new status of the Sim resource. Can be: `ready`, `active`,
        `suspended`, or `deactivated`.
      enum:
        - new
        - ready
        - active
        - suspended
        - deactivated
        - canceled
        - scheduled
        - updating
    Sim:
      type: object
      properties:
        sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^DE[0-9a-fA-F]{32}$
          nullable: true
          description: The unique string that we created to identify the Sim resource.
          x-jvm-type: DeviceSid
        unique_name:
          type: string
          nullable: true
          description: An application-defined string that uniquely identifies the
            resource. It can be used in place of the resource's `sid` in the URL to
            address the resource.
          x-kore:
            pii:
              handling: standard
              deleteSla: 30
        friendly_name:
          type: string
          nullable: true
          description: The string that you assigned to describe the resource.
        account_sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          nullable: true
          description: The SID of the Account to which the Sim resource belongs.
        status:
          $ref: '#/components/schemas/SimResourceStatus'
        rate_plan_sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^WP[0-9a-fA-F]{32}$
          nullable: true
          description: The SID of the [RatePlan resource](https://docs.korewireless.com/en-us/api/products/programmable-wireless/rateplan-resource)
            to which the Sim resource is assigned.
          x-jvm-type: RatePlanSid
        iccid:
          type: string
          nullable: true
          description: The [ICCID](https://en.wikipedia.org/wiki/SIM_card#ICCID) associated
            with the SIM.
          x-kore:
            pii:
              handling: standard
              deleteSla: 30
        eid:
          type: string
          nullable: true
          description: Deprecated.
        commands_callback_url:
          type: string
          format: uri
          nullable: true
          description: The URL we call using the `commands_callback_method` when the
            SIM originates a machine-to-machine [Command](https://docs.korewireless.com/en-us/api/products/programmable-wireless/command-resource).
            Your server should respond with an HTTP status code in the 200 range;
            any response body will be ignored.
        commands_callback_method:
          type: string
          format: http-method
          enum:
          - GET
          - POST
          nullable: true
          description: 'The HTTP method we use to call `commands_callback_url`.  Can
            be: `POST` or `GET`. Default is `POST`.'
        date_created:
          type: string
          format: date-time
          nullable: true
          description: The date and time in GMT when the resource was created specified
            in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format.
        date_updated:
          type: string
          format: date-time
          nullable: true
          description: The date and time in GMT when the Sim resource was last updated
            specified in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)
            format.
        ip_address:
          type: string
          nullable: true
          description: Deprecated.
        reset_status:
          $ref: '#/components/schemas/SimResourceResetStatus'
        links:
          type: object
          properties:
            rate_plan:
              type: string
            usage_records:
              type: string
            data_sessions:
              type: string
        url:
          type: string
          format: uri
          nullable: true
          description: The absolute URL of the resource.
        voice_url:
          type: string
          format: uri
          nullable: true
          description: Deprecated. The URL we call using the `voice_method` when the
            SIM-connected device makes a voice call.
        voice_method:
          type: string
          format: http-method
          enum:
          - GET
          - POST
          nullable: true
          description: 'Deprecated. The HTTP method we use to call `voice_url`. Can
            be: `GET` or `POST`. Default is `POST`.'
        voice_fallback_url:
          type: string
          format: uri
          nullable: true
          description: Deprecated. The URL we call using the `voice_fallback_method`
            when an error occurs while retrieving or executing the TwiML requested
            from `voice_url`.
        voice_fallback_method:
          type: string
          format: http-method
          enum:
          - GET
          - POST
          nullable: true
          description: 'Deprecated. The HTTP method we use to call `voice_fallback_url`.
            Can be: `GET` or `POST`. Default is `POST`.'
        sms_url:
          type: string
          format: uri
          nullable: true
          description: Deprecated.
        sms_method:
          type: string
          format: http-method
          enum:
          - GET
          - POST
          nullable: true
          description: Deprecated.
        sms_fallback_url:
          type: string
          format: uri
          nullable: true
          description: Deprecated.
        sms_fallback_method:
          type: string
          format: http-method
          enum:
          - GET
          - POST
          nullable: true
          description: Deprecated.
    SimResourceResetStatus:
      type: string
      enum:
        - resetting
      nullable: true
      description: 'The connectivity reset status of the SIM. Can be: null or
        `resetting`. When a connectivity reset is initiated on a SIM, this property is `resetting`. After the reset completes, it is null.'
    SimResourceStatus:
      type: string
      enum:
        - deactivated
        - updating
        - ready
        - active
        - deleted
        - suspended
        - scheduled
        - canceled
        - new
    SimResetStatus:
      type: string
      description: >-
        Initiate a connectivity reset on the SIM. Set to `resetting` to initiate
        a connectivity reset on the SIM. No other value is valid.
      enum:
        - resetting
    Command:
      type: object
      properties:
        sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^DC[0-9a-fA-F]{32}$
          nullable: true
          description: The unique string that we created to identify the Command resource.
        account_sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          nullable: true
          description: The SID of the Account that created the Command resource.
        sim_sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^DE[0-9a-fA-F]{32}$
          nullable: true
          description: The SID of the Sim resource that the Command was sent to or from.
        command:
          type: string
          nullable: true
          description: >-
            The message being sent to or from the SIM. For text mode messages,
            this can be up to 160 characters. For binary mode messages, this is
            a series of up to 140 bytes of data encoded using base64.
        command_mode:
          $ref: '#/components/schemas/CommandMode'
        transport:
          $ref: '#/components/schemas/CommandTransport'
        delivery_receipt_requested:
          type: boolean
          nullable: true
          description: Whether to request a delivery receipt.
        status:
          $ref: '#/components/schemas/CommandStatus'
        direction:
          $ref: '#/components/schemas/CommandDirection'
        date_created:
          type: string
          format: date-time
          nullable: true
          description: >-
            The date and time in GMT when the resource was created specified in
            ISO 8601 format.
        date_updated:
          type: string
          format: date-time
          nullable: true
          description: >-
            The date and time in GMT when the resource was last updated
            specified in ISO 8601 format.
        url:
          type: string
          format: uri
          nullable: true
          description: The absolute URL of the resource.
    CommandDirection:
      type: string
      enum:
        - from_sim
        - to_sim
      nullable: true
      description: >-
        The direction of the Command. Can be `to_sim` or `from_sim`. The
        value of `to_sim` is synonymous with the term `mobile terminated`,
        and `from_sim` is synonymous with the term `mobile originated`.
    CommandStatus:
      type: string
      nullable: true
      description: >-
        The status of the Command. Can be: `queued`, `sent`, `delivered`,
        `received`, or `failed`. See Status Values for a description of each
        state.
      enum:
        - queued
        - sent
        - delivered
        - received
        - failed
    CommandMode:
      type: string
      description: >-
        The mode to use when sending the SMS message. Can be: `text` or
        `binary`. The default SMS mode is `text`.
      enum:
        - text
        - binary
    CommandTransport:
      type: string
      enum:
        - sms
        - ip
      nullable: true
      description: 'The type of transport used. Can be: `sms` or `ip`.'
    DataSession:
      type: object
      properties:
        sid:
          type: string
          nullable: true
          description: >-
            The unique string that we created to identify the DataSession
            resource.
        sim_sid:
          type: string
          nullable: true
          description: The SID of the Sim resource that the Data Session is for.
        account_sid:
          type: string
          minLength: 34
          maxLength: 34
          pattern: ^AC[0-9a-fA-F]{32}$
          nullable: true
          description: The SID of the Account that created the DataSession resource.
        radio_link:
          type: string
          nullable: true
          description: The generation of wireless technology that the device was using.
        operator_mcc:
          type: string
          nullable: true
          description: >-
            The 'mobile country code' is the unique ID of the home country where
            the Data Session took place.
        operator_mnc:
          type: string
          nullable: true
          description: >-
            The 'mobile network code' is the unique ID specific to the mobile
            operator network where the Data Session took place.
        operator_country:
          type: string
          nullable: true
          description: >-
            The three letter country code representing where the device's Data
            Session took place. This is determined by looking up the
            `operator_mcc`.
        operator_name:
          type: string
          nullable: true
          description: >-
            The friendly name of the mobile operator network that the SIM
            -connected device is attached to. This is determined by looking up
            the `operator_mnc`.
        cell_id:
          type: string
          nullable: true
          description: >-
            The unique ID of the cellular tower that the device was attached to
            at the moment when the Data Session was last updated.
        cell_location_estimate:
          type: object
          properties:
            lat:
              type: number
            lon:
              type: number
          nullable: true
          description: >-
            An object that describes the estimated location in latitude and
            longitude where the device's Data Session took place. The location
            is derived from the `cell_id` when the Data Session was last
            updated.
        packets_uploaded:
          type: integer
          nullable: true
          description: >-
            The number of packets uploaded by the device between the `start`
            time and when the Data Session was last updated.
        packets_downloaded:
          type: integer
          nullable: true
          description: >-
            The number of packets downloaded by the device between the `start`
            time and when the Data Session was last updated.
        last_updated:
          type: string
          format: date-time
          nullable: true
          description: >-
            The date that the resource was last updated, given as GMT in ISO
            8601 format.
        start:
          type: string
          format: date-time
          nullable: true
          description: >-
            The date that the Data Session started, given as GMT in ISO 8601
            format.
        end:
          type: string
          format: date-time
          nullable: true
          description: The date that the record ended, given as GMT in [ISO 8601 format.
        imei:
          type: string
          nullable: true
          description: >-
            The 'international mobile equipment identity' is the unique ID of
            the device using the SIM to connect. An IMEI is a 15-digit string:
            14 digits for the device identifier plus a check digit calculated
            using the Luhn formula.
  securitySchemes:
    Auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.korewireless.com/api-services/v1/auth/token
          scopes: {}
  parameters:
    PageSizeQueryParam:
      in: query
      name: PageSize
      description: Maximum number of instances to return
      schema:
        type: integer
        format: int32
    PageTokenQueryParam:
      in: query
      name: PageToken
      description: Page token used to determine which page of instances to return
      schema:
        type: string
    PageNumberQueryParam:
      in: query
      name: Page
      description: Optional page number
      schema:
        type: integer
        format: int32
x-amazon-apigateway-api-key-source: AUTHORIZER
security:
  - {}
  - Auth: []
x-hideTryItPanel: true